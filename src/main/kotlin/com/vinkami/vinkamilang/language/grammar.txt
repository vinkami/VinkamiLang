Type:
    Int: [0-9]+
    Float: [0-9]*\.[0-9]+
    String: \"[A-Za-z0-9_]*\" | \'[A-Za-z0-9_]*\'
    List: \[\] | \[Exp(, Exp)*\]
    Bool: "true" | "false"

Variable (Var): [a-zA-Z][a-zA-Z0-9]* & !Kw

Keyword (Kw): "if" | "else" | "elif" | "for" | "in" | "while" | "is" | "import" | "var" | "true" | "false" | "return"

Expression (Exp): (Variable | Type) | (Exp Op Exp)

Operator (Op):
    Arithmetic: "+" | "-" | "*" | "/" | "**" | "%"
    Comparative: "==" | ">" | "<" | "<=" | ">=" | "!=" | "&" | "|"
    Definitive: "=" | "+=" | "-=" | "*=" | "/="

Condition (Cd): Exp OpComp Exp | Func

Function (Func): [a-zA-Z][a-zA-Z0-9]* & !Kw

Statement:
    If:
        """
        if <Cd>:
            <St>+
        [elif <Cd>:
            <St>+
        ]*
        [else <Cd>:
            <St>+
        ]?
        """

    For:
        """
        for <Var> in <Type>:
            <St>+
        """

    While:
        """
        while <Cd>:
            <St>+
        """

